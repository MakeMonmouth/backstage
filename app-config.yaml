app:
  title: Make Monmouth
  baseUrl: https://mmwbackstage.herokuapp.com

organization:
  name: Make Monmouth

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/tutorials/backend-to-backend-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: https://mmwbackstage.herokuapp.com
  listen:
    port: ${PORT}
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: https://mmwbackstage.herokuapp.com
    methods: [GET, POST, PUT, DELETE]
    credentials: true
  database:
    client: better-sqlite3
    connection: ':memory:'
  cache:
    store: memory
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

integrations:
  github:
    - host: github.com
      token: ${GITHUB_TOKEN}
    ### Example for how to add your GitHub Enterprise instance using the API:
    # - host: ghe.example.net
    #   apiBaseUrl: https://ghe.example.net/api/v3
    #   token: ${GHE_TOKEN}

proxy:
  '/test':
    target: 'https://example.com'
    changeOrigin: true
  '/grafana/api':
    # May be an internal DNS
    target: ${GRAFANA_URI}
    headers:
      Authorization: Bearer ${GRAFANA_TOKEN}
  '/prometheus/api':
    # url to the api and path of your hosted prometheus instance
    target: ${GRAFANA_PROMETHEUS_URI}
    headers:
      Authorization: Basic ${GRAFANA_PROMETHEUS_BASE64_CREDS}
  '/sentry/api':
    target: https://sentry.io/api/
    allowedMethods: [ 'GET' ]
    headers:
      Authorization: Bearer ${SENTRY_TOKEN}
sentry:
  organization: '${SENTRY_ORG}'

grafana:
  # Publicly accessible domain
  domain: ${GRAFANA_URI}

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'local' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

auth:
  # see https://backstage.io/docs/auth/ to learn about auth providers
  providers:
    github:
      development:
        clientId: ${GITHUB_AUTH_CLIENT_ID}
        clientSecret: ${GITHUB_AUTH_CLIENT_SECRET}
      production:
        clientId: ${GITHUB_AUTH_CLIENT_ID}
        clientSecret: ${GITHUB_AUTH_CLIENT_SECRET}

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  locations:
    # (since 0.13.5) Scan all repositories for a catalog-info.yaml in the root of the default branch
    - type: github-discovery
      target: https://github.com/makemonmouth
